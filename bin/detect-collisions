#!/usr/bin/env php
<?php declare(strict_types=1);

use ShipMonk\NameCollision\CollisionDetector;
use ShipMonk\NameCollision\DetectionConfig;
use ShipMonk\NameCollision\Exception\FileParsingException;
use ShipMonk\NameCollision\Exception\InvalidConfigException;

$autoloadFiles = [
    __DIR__ . '/../vendor/autoload.php',
    __DIR__ . '/../../../autoload.php',
];

foreach ($autoloadFiles as $autoloadFile) {
    if (file_exists($autoloadFile)) {
        require_once $autoloadFile;
        break;
    }
}

/**
 * @return never
 */
$exit = function (string $message): void {
    echo "ERROR: $message\n";
    exit(255);
};

$cwd = getcwd();
$directories = array_slice($argv, 1);

if ($directories === []) {
    $exit("no directories provided, use e.g. `detect-collisions src tests`");
}

$configFilePath = $cwd . "/collision-detector.json";

try {
    $config = file_exists($configFilePath)
        ? DetectionConfig::fromConfigFile($directories, $cwd, $configFilePath)
        : DetectionConfig::fromDefaults($directories, $cwd);

    $detector = new CollisionDetector($config);
    $collisions = $detector->getCollidingTypes();
} catch (FileParsingException | InvalidConfigException $e) {
    $exit($e->getMessage());
}

foreach ($collisions as $name => $fileLines) {
    $count = count($fileLines);
    echo "$name is defined $count times:\n";
    foreach ($fileLines as $fileLine) {
        echo " > {$fileLine->getFilePath()}:{$fileLine->getLine()}\n";
    }
    echo "\n";
}

if ($collisions === []) {
    echo "OK: no name collision found in: " . implode(', ', $directories) . "\n";
}

exit(count($collisions) > 0 ? 1 : 0);
