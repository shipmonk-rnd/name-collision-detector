#!/usr/bin/env php
<?php declare(strict_types=1);

use ShipMonk\InvalidPathProvidedException;
use ShipMonk\NameCollisionDetector;

$autoloadFiles = [
    __DIR__ . '/../vendor/autoload.php',
    __DIR__ . '/../../../autoload.php',
];

foreach ($autoloadFiles as $autoloadFile) {
    if (file_exists($autoloadFile)) {
        require_once $autoloadFile;
        break;
    }
}

$possibleOptions = ['classes', 'functions', 'constants'];
$providedOptions = getopt('', $possibleOptions, $restIndex);
$check = array_keys($providedOptions);
$check = $check === [] ? $possibleOptions : $check; // check all if no option is provided

$cwd = getcwd();
$providedFolders = array_slice($argv, $restIndex);
$directories = array_map(static function (string $arg) use ($cwd): string {
    return $cwd . '/' . $arg;
}, $providedFolders);

if ($directories === []) {
    echo "ERROR: no directories provided, use e.g. `detect-collisions src tests`\n";
    exit(255);
}

try {
    $detector = new NameCollisionDetector($directories, $cwd);
} catch (InvalidPathProvidedException $e) {
    echo "ERROR: {$e->getMessage()}\n";
    exit(255);
}

echo "Checking duplicates of " . implode(' and ', $check) . " in " . implode(', ', $providedFolders) . ":\n\n";

$collisions = array_merge(
    in_array('classes', $check, true) ? $detector->getCollidingClasses() : [],
    in_array('functions', $check, true) ? $detector->getCollidingFunctions() : [],
    in_array('constants', $check, true) ? $detector->getCollidingConstants() : []
);

foreach ($collisions as $name => $filePaths) {
    $count = count($filePaths);
    echo "$name is defined $count times:\n";
    foreach ($filePaths as $filePath) {
        echo " > $filePath\n";
    }
    echo "\n";
}

if ($collisions === []) {
    echo "OK: no name collision found in: " . implode(', ', $directories) . "\n";
}

exit(count($collisions) > 0 ? 1 : 0);
